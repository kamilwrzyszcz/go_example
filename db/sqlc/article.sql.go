// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: article.sql

package db

import (
	"context"
	"database/sql"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
    author,
    headline,
    content
) VALUES (
    $1, $2, $3
) RETURNING id, author, headline, content, created_at, edited_at
`

type CreateArticleParams struct {
	Author   string `json:"author"`
	Headline string `json:"headline"`
	Content  string `json:"content"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle, arg.Author, arg.Headline, arg.Content)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Headline,
		&i.Content,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const getArticle = `-- name: GetArticle :one
SELECT id, author, headline, content, created_at, edited_at FROM articles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Headline,
		&i.Content,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, author, headline, content, created_at, edited_at FROM articles
WHERE author = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListArticlesParams struct {
	Author string `json:"author"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticles, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Headline,
			&i.Content,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET
    headline = coalesce($1, headline),
    content = coalesce($2, content),
    edited_at = NOW()
WHERE id = $3
RETURNING id, author, headline, content, created_at, edited_at
`

type UpdateArticleParams struct {
	Headline sql.NullString `json:"headline"`
	Content  sql.NullString `json:"content"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, updateArticle, arg.Headline, arg.Content, arg.ID)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Headline,
		&i.Content,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}
